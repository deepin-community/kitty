From: Maytham Alsudany <maytha8thedev@gmail.com>
Date: Fri, 10 Nov 2023 15:50:00 +0800
Subject: Remove quickstart install instructions
Forwarded: not-needed

This also removed a few privacy breaches in the forms of images.

--- a/docs/quickstart.rst
+++ b/docs/quickstart.rst
@@ -3,24 +3,7 @@
 Quickstart
 ===========
 
-.. toctree::
-   :hidden:
-
-   binary
-   build
-
-Pre-built binaries of |kitty| are available for both macOS and Linux. See the
-:doc:`binary install instructions </binary>`. You can also :doc:`build from
-source </build>`.
-
-Additionally, you can use your favorite package manager to install the |kitty|
-package, but note that some Linux distribution packages are woefully outdated.
-|kitty| is available in a vast number of package repositories for macOS
-and Linux.
-
-.. image:: https://repology.org/badge/tiny-repos/kitty.svg
-   :target: https://repology.org/project/kitty/versions
-   :alt: Number of repositories kitty is available in
+Congratulations! You've installed the Debian package for |kitty|!
 
 See :doc:`Configuring kitty <conf>` for help on configuring |kitty| and
 :doc:`Invocation <invocation>` for the command line arguments |kitty| supports.
--- a/docs/binary.rst
+++ /dev/null
@@ -1,135 +0,0 @@
-Install kitty
-========================
-
-Binary install
-----------------
-
-.. highlight:: sh
-
-You can install pre-built binaries of |kitty| if you are on macOS or Linux using
-the following simple command:
-
-.. code-block:: sh
-
-    _kitty_install_cmd
-
-
-The binaries will be installed in the standard location for your OS,
-:file:`/Applications/kitty.app` on macOS and :file:`~/.local/kitty.app` on
-Linux. The installer only touches files in that directory. To update kitty,
-simply re-run the command.
-
-.. warning::
-   **Do not** copy the kitty binary out of the installation folder. If you want
-   to add it to your :envvar:`PATH`, create a symlink in :file:`~/.local/bin` or
-   :file:`/usr/bin` or wherever. You should create a symlink for the :file:`kitten`
-   binary as well.
-
-
-Manually installing
----------------------
-
-If something goes wrong or you simply do not want to run the installer, you can
-manually download and install |kitty| from the `GitHub releases page
-<https://github.com/kovidgoyal/kitty/releases>`__. If you are on macOS, download
-the :file:`.dmg` and install as normal. If you are on Linux, download the
-tarball and extract it into a directory. The |kitty| executable will be in the
-:file:`bin` sub-directory.
-
-
-Desktop integration on Linux
---------------------------------
-
-If you want the kitty icon to appear in the taskbar and an entry for it to be
-present in the menus, you will need to install the :file:`kitty.desktop` file.
-The details of the following procedure may need to be adjusted for your
-particular desktop, but it should work for most major desktop environments.
-
-.. code-block:: sh
-
-    # Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in
-    # your system-wide PATH)
-    ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/
-    # Place the kitty.desktop file somewhere it can be found by the OS
-    cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
-    # If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file
-    cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/
-    # Update the paths to the kitty and its icon in the kitty desktop file(s)
-    sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
-    sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
-    # Make xdg-terminal-exec (and hence desktop environments that support it use kitty)
-    echo 'kitty.desktop' > ~/.config/xdg-terminals.list
-
-.. note::
-    In :file:`kitty-open.desktop`, kitty is registered to handle some supported
-    MIME types. This will cause kitty to take precedence on some systems where
-    the default apps are not explicitly set. For example, if you expect to use
-    other GUI file managers to open dir paths when using commands such as
-    :program:`xdg-open`, you should configure the default opener for the MIME
-    type ``inode/directory``::
-
-        xdg-mime default org.kde.dolphin.desktop inode/directory
-
-.. note::
-    If you use the venerable `stow <https://www.gnu.org/software/stow/>`__
-    command to manage your manual installations, the following takes care of the
-    above for you (use with :code:`dest=~/.local/stow`)::
-
-        cd ~/.local/stow
-        stow -v kitty.app
-
-
-Customizing the installation
---------------------------------
-
-.. _nightly:
-
-* You can install the latest nightly kitty build with ``installer``:
-
-  .. code-block:: sh
-
-     _kitty_install_cmd \
-         installer=nightly
-
-  If you want to install it in parallel to the released kitty specify a
-  different install locations with ``dest``:
-
-  .. code-block:: sh
-
-     _kitty_install_cmd \
-         installer=nightly dest=/some/other/location
-
-* You can specify a different install location, with ``dest``:
-
-  .. code-block:: sh
-
-     _kitty_install_cmd \
-         dest=/some/other/location
-
-* You can tell the installer not to launch |kitty| after installing it with
-  ``launch=n``:
-
-  .. code-block:: sh
-
-     _kitty_install_cmd \
-         launch=n
-
-* You can use a previously downloaded dmg/tarball, with ``installer``:
-
-  .. code-block:: sh
-
-     _kitty_install_cmd \
-         installer=/path/to/dmg or tarball
-
-
-Uninstalling
-----------------
-
-All the installer does is copy the kitty files into the install directory. To
-uninstall, simply delete that directory.
-
-
-Building from source
-------------------------
-
-|kitty| is easy to build from source, follow the :doc:`instructions <build>`.
--- a/docs/build.rst
+++ /dev/null
@@ -1,203 +0,0 @@
-Build from source
-==================
-
-.. image:: https://github.com/kovidgoyal/kitty/workflows/CI/badge.svg
-  :alt: Build status
-  :target: https://github.com/kovidgoyal/kitty/actions?query=workflow%3ACI
-
-.. note::
-   If you just want to test the latest changes to kitty, you don't need to build
-   from source. Instead install the :ref:`latest nightly build <nightly>`.
-
-.. highlight:: sh
-
-|kitty| is designed to run from source, for easy hack-ability. All you need to
-get started is a C compiler and the `go compiler
-<https://go.dev/doc/install>`__. After installing those, run the following commands::
-
-    git clone https://github.com/kovidgoyal/kitty.git && cd kitty
-    ./dev.sh build
-
-That's it, kitty will be built from source, magically. You can run it as
-:file:`kitty/launcher/kitty`.
-
-This works, because the :code:`./dev.sh build` command downloads all the major
-dependencies of kitty as pre-built binaries for your platform and builds kitty
-to use these rather than system libraries.
-
-If you make changes to kitty code, simply re-run :code:`./dev.sh build`
-to build kitty with your changes.
-
-.. note::
-   If you plan to run kitty from source long-term, there are a couple of
-   caveats to be aware of. You should occasionally run ``./dev.sh deps``
-   to have the dependencies re-downloaded as they are updated periodically.
-   Also, the built kitty executable assumes it will find source in whatever
-   directory you first ran :code:`./dev.sh build` in. If you move/rename the
-   directory, run :code:`make clean && ./dev.sh build`. You should also create
-   symlinks to the :file:`kitty` and :file:`kitten` binaries from somewhere
-   in your PATH so that they can be conveniently launched.
-
-.. note::
-   On macOS, you can use :file:`kitty/launcher/kitty.app` to run kitty as well,
-   but note that this is an unsigned kitty.app so some functionality such as
-   notifications will not work as Apple disallows this.  If you need this
-   functionality, you can try signing the built :file:`kitty.app` with a self
-   signed certificate, see for example, `here
-   <https://stackoverflow.com/questions/27474751/how-can-i-codesign-an-app-without-being-in-the-mac-developer-program/27474942>`__.
-
-Building in debug mode
-^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-The following will build with debug symbols::
-
-    ./dev.sh build --debug
-
-To build with sanitizers and debug symbols::
-
-    ./dev.sh build --debug --sanitize
-
-For more help on the various options supported by the build script::
-
-    ./dev.sh build -h
-
-
-Building the documentation
--------------------------------------
-
-To have the kitty documentation available locally, run::
-
-    ./dev.sh deps -for-docs && ./dev.sh docs
-
-To develop the docs, with live reloading, use::
-
-    ./dev.sh deps -for-docs && ./dev.sh docs -live-reload
-
-Dependencies
-----------------
-
-These dependencies are needed when building against system libraries only.
-
-Run-time dependencies:
-
-* ``python`` >= 3.8
-* ``harfbuzz`` >= 2.2.0
-* ``zlib``
-* ``libpng``
-* ``liblcms2``
-* ``libxxhash``
-* ``openssl``
-* ``freetype`` (not needed on macOS)
-* ``fontconfig`` (not needed on macOS)
-* ``libcanberra`` (not needed on macOS)
-* ``libsystemd`` (optional, not needed on non systemd systems)
-* ``ImageMagick`` (optional, needed to display uncommon image formats in the terminal)
-
-
-Build-time dependencies:
-
-* ``gcc`` or ``clang``
-* ``simde``
-* ``go`` >= _build_go_version (see :file:`go.mod` for go packages used during building)
-* ``pkg-config``
-* For building on Linux in addition to the above dependencies you might also
-  need to install the following packages, if they are not already installed by
-  your distro:
-
-  - ``libdbus-1-dev``
-  - ``libxcursor-dev``
-  - ``libxrandr-dev``
-  - ``libxi-dev``
-  - ``libxinerama-dev``
-  - ``libgl1-mesa-dev``
-  - ``libxkbcommon-x11-dev``
-  - ``libfontconfig-dev``
-  - ``libx11-xcb-dev``
-  - ``liblcms2-dev``
-  - ``libssl-dev``
-  - ``libpython3-dev``
-  - ``libxxhash-dev``
-  - ``libsimde-dev``
-
-
-Build and run from source with Nix
--------------------------------------------
-
-On NixOS or any other Linux or macOS system with the Nix package manager
-installed, execute `nix-shell
-<https://nixos.org/guides/nix-pills/developing-with-nix-shell.html>`__ to create
-the correct environment to build kitty or use ``nix-shell --pure`` instead to
-eliminate most of the influence of the outside system, e.g. globally installed
-packages. ``nix-shell`` will automatically fetch all required dependencies and
-make them available in the newly spawned shell.
-
-Then proceed with ``make`` or ``make app`` according to the platform specific
-instructions above.
-
-.. _packagers:
-
-Notes for Linux/macOS packagers
-----------------------------------
-
-The released |kitty| source code is available as a `tarball`_ from
-`the GitHub releases page <https://github.com/kovidgoyal/kitty/releases>`__.
-
-While |kitty| does use Python, it is not a traditional Python package, so please
-do not install it in site-packages.
-Instead run::
-
-    make linux-package
-
-This will install |kitty| into the directory :file:`linux-package`. You can run
-|kitty| with :file:`linux-package/bin/kitty`. All the files needed to run kitty
-will be in :file:`linux-package/lib/kitty`. The terminfo file will be installed
-into :file:`linux-package/share/terminfo`. Simply copy these files into
-:file:`/usr` to install |kitty|. In other words, :file:`linux-package` is the
-staging area into which |kitty| is installed. You can choose a different staging
-area, by passing the ``--prefix`` argument to :file:`setup.py`.
-
-You should probably split |kitty| into three packages:
-
-:code:`kitty-terminfo`
-    Installs the terminfo file
-
-:code:`kitty-shell-integration`
-    Installs the shell integration scripts (the contents of the
-    shell-integration directory in the kitty source code), probably to
-    :file:`/usr/share/kitty/shell-integration`
-
-:code:`kitty`
-    Installs the main program
-
-This allows users to install the terminfo and shell integration files on
-servers into which they ssh, without needing to install all of |kitty|. The
-shell integration files **must** still be present in
-:file:`lib/kitty/shell-integration` when installing the kitty main package as
-the kitty program expects to find them there.
-
-.. note::
-   You need a couple of extra dependencies to build linux-package. :file:`tic`
-   to compile terminfo files, usually found in the development package of
-   :file:`ncurses`. Also, if you are building from a git checkout instead of the
-   released source code tarball, you will need to install the dependencies from
-   :file:`docs/requirements.txt` to build the kitty documentation. They can be
-   installed most easily with ``python -m pip -r docs/requirements.txt``.
-
-This applies to creating packages for |kitty| for macOS package managers such as
-Homebrew or MacPorts as well.
-
-Cross compilation
--------------------
-
-While cross compilation is neither officially supported, nor recommended, as it
-means the test suite cannot be run for the cross compiled build, there is some
-support for cross compilation. Basically, run::
-
-    make prepare-for-cross-compile
-
-Then setup the cross compile environment (CC, CFLAGS, PATH, etc.) and run::
-
-    make cross-compile
-
-This will create the cross compiled build in the :file:`linux-package`
-directory.
